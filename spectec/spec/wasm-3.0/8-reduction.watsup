;;
;; Configurations
;;

relation Step: config ~> config       hint(show "E") hint(macro "stepto") hint(tabular)
relation Step_pure: instr* ~> instr*  hint(show "E") hint(macro "stepto") hint(tabular)
relation Step_read: config ~> instr*  hint(show "E") hint(macro "stepto") hint(tabular)
relation Steps: config ~>* config     hint(show "E") hint(macro "steptostar") hint(tabular)

rule Step/pure:
  z; instr*  ~>  z; instr'*
  -- Step_pure: instr* ~> instr'*

rule Step/read:
  z; instr*  ~>  z; instr'*
  -- Step_read: z; instr* ~> instr'*

rule Steps/refl:
  z; instr* ~>* z; instr*

rule Steps/trans:
  z; instr*  ~>*  z''; instr''*
  -- Step: z; instr*  ~>  z'; instr'*
  -- Steps: z'; instr'*  ~>*  z''; instr''*


;; Expressions

relation Eval_expr: state; expr ~>* state; val*  hint(show "E-expr") hint(macro "steptostar") hint(tabular)

rule Eval_expr:
  z; instr*  ~>*  z'; val*
  -- Steps: z; instr*  ~>*  z'; val*


;;
;; Instructions
;;

;; Polymorphic instructions

rule Step_pure/unreachable:
  UNREACHABLE  ~>  TRAP

rule Step_pure/nop:
  NOP  ~>  eps

rule Step_pure/drop:
  val DROP  ~>  eps


rule Step_pure/select-true:
  val_1 val_2 (CONST I32 c) (SELECT (t*)?)  ~>  val_1
  -- if c =/= 0

rule Step_pure/select-false:
  val_1 val_2 (CONST I32 c) (SELECT (t*)?)  ~>  val_2
  -- if c = 0


;; Block instructions

def $blocktype_(state, blocktype) : functype hint(macro "fblocktype")
def $blocktype_(z, _IDX x) = ft  -- Expand: $type(z, x) ~~ FUNC ft
def $blocktype_(z, _RESULT t?) = eps -> t?

rule Step_read/block:
  z; val^m (BLOCK bt instr*)  ~>  (LABEL_ n `{eps} val^m instr*)
  -- if $blocktype_(z, bt) = t_1^m -> t_2^n

rule Step_read/loop:
  z; val^m (LOOP bt instr*)  ~>  (LABEL_ m `{LOOP bt instr*} val^m instr*)
  -- if $blocktype_(z, bt) = t_1^m -> t_2^n

rule Step_pure/if-true:
  (CONST I32 c) (IF bt instr_1* ELSE instr_2*)  ~>  (BLOCK bt instr_1*)
  -- if c =/= 0

rule Step_pure/if-false:
  (CONST I32 c) (IF bt instr_1* ELSE instr_2*)  ~>  (BLOCK bt instr_2*)
  -- if c = 0


rule Step_pure/label-vals:
  (LABEL_ n `{instr*} val*)  ~>  val*


;; Branch instructions

;; TODO(4, rossberg): may want a label context instead of bubbling up
rule Step_pure/br-label-zero:
  (LABEL_ n `{instr'*} val'* val^n (BR l) instr*)  ~>  val^n instr'*
  -- if l = 0

rule Step_pure/br-label-succ:
  (LABEL_ n `{instr'*} val* (BR l) instr*)  ~>  val* (BR $(l - 1))
  -- if l > 0

rule Step_pure/br-handler:
  (HANDLER_ n `{catch*} val* (BR l) instr*)  ~>  val* (BR l)


rule Step_pure/br_if-true:
  (CONST I32 c) (BR_IF l)  ~>  (BR l)
  -- if c =/= 0

rule Step_pure/br_if-false:
  (CONST I32 c) (BR_IF l)  ~>  eps
  -- if c = 0


rule Step_pure/br_table-lt:
  (CONST I32 i) (BR_TABLE l* l')  ~>  (BR l*[i])
  -- if i < |l*|

rule Step_pure/br_table-ge:
  (CONST I32 i) (BR_TABLE l* l')  ~>  (BR l')
  -- if i >= |l*|


rule Step_pure/br_on_null-null:
  val (BR_ON_NULL l) ~> (BR l)
  -- if val = REF.NULL ht

rule Step_pure/br_on_null-addr:
  val (BR_ON_NULL l) ~> val
  -- otherwise


rule Step_pure/br_on_non_null-null:
  val (BR_ON_NON_NULL l) ~> eps
  -- if val = REF.NULL ht

rule Step_pure/br_on_non_null-addr:
  val (BR_ON_NON_NULL l) ~> val (BR l)
  -- otherwise


rule Step_read/br_on_cast-succeed:
  s; f; ref (BR_ON_CAST l rt_1 rt_2)  ~>  ref (BR l)
  ;; TODO(3, rossberg): -- Ref_type: s |- ref : $inst_reftype(f.MODULE, rt_2)
  -- Ref_type: s |- ref : rt
  -- Reftype_sub: {} |- rt <: $inst_reftype(f.MODULE, rt_2)

rule Step_read/br_on_cast-fail:
  s; f; ref (BR_ON_CAST l rt_1 rt_2)  ~>  ref
  -- otherwise


rule Step_read/br_on_cast_fail-succeed:
  s; f; ref (BR_ON_CAST_FAIL l rt_1 rt_2)  ~>  ref
  ;; TODO(3, rossberg): -- Ref_type: s |- ref : $inst_reftype(f.MODULE, rt_2)
  -- Ref_type: s |- ref : rt
  -- Reftype_sub: {} |- rt <: $inst_reftype(f.MODULE, rt_2)

rule Step_read/br_on_cast_fail-fail:
  s; f; ref (BR_ON_CAST_FAIL l rt_1 rt_2)  ~>  ref (BR l)
  -- otherwise


;; Function instructions

rule Step_read/call:
  z; (CALL x)  ~>  (REF.FUNC_ADDR a) (CALL_REF $funcinst(z)[a].TYPE)
  -- if $moduleinst(z).FUNCS[x] = a

rule Step_read/call_ref-null:
  z; (REF.NULL ht) (CALL_REF yy)  ~>  TRAP

rule Step_read/call_ref-func:
  z; val^n (REF.FUNC_ADDR a) (CALL_REF yy)  ~>  (FRAME_ m `{f} (LABEL_ m `{eps} instr*))
  ----
  -- if $funcinst(z)[a] = fi
  -- Expand: fi.TYPE ~~ FUNC (t_1^n -> t_2^m)
  -- if fi.CODE = FUNC x (LOCAL t)* (instr*)
  -- if f = {LOCALS val^n ($default_(t))*, MODULE fi.MODULE}


rule Step_read/return_call:
  z; (RETURN_CALL x)  ~>  (REF.FUNC_ADDR a) (RETURN_CALL_REF $funcinst(z)[a].TYPE)
  -- if $moduleinst(z).FUNCS[x] = a


rule Step_read/return_call_ref-label:
  z; (LABEL_ k `{instr'*} val* (RETURN_CALL_REF yy) instr*)  ~>  val* (RETURN_CALL_REF yy)

rule Step_read/return_call_ref-handler:
  z; (HANDLER_ k `{catch*} val* (RETURN_CALL_REF yy) instr*)  ~>  val* (RETURN_CALL_REF yy)

rule Step_read/return_call_ref-frame-null:
  z; (FRAME_ k `{f} val* (REF.NULL ht) (RETURN_CALL_REF yy) instr*)  ~>  TRAP

rule Step_read/return_call_ref-frame-addr:
  z; (FRAME_ k `{f} val'* val^n (REF.FUNC_ADDR a) (RETURN_CALL_REF yy) instr*)  ~>  val^n (REF.FUNC_ADDR a) (CALL_REF yy)
  ----
  -- Expand: $funcinst(z)[a].TYPE ~~ FUNC (t_1^n -> t_2^m)


rule Step_pure/call_indirect:
  (CALL_INDIRECT x yy)  ~>  (TABLE.GET x) (REF.CAST (REF NULL yy)) (CALL_REF yy)

rule Step_pure/return_call_indirect:
  (RETURN_CALL_INDIRECT x yy)  ~>  (TABLE.GET x) (REF.CAST (REF NULL yy)) (RETURN_CALL_REF yy)


rule Step_pure/frame-vals:
  (FRAME_ n `{f} val^n)  ~>  val^n

rule Step_pure/return-frame:
  (FRAME_ n `{f} val'* val^n RETURN instr*)  ~>  val^n

rule Step_pure/return-label:
  (LABEL_ n `{instr'*} val* RETURN instr*)  ~>  val* RETURN

rule Step_pure/return-handler:
  (HANDLER_ n `{catch*} val* RETURN instr*)  ~>  val* RETURN


;; Exceptions

rule Step/throw:
  ;; TODO: Appropriate variable name for execption instance `exn`
  z; val^n (THROW x)  ~>  $add_exninst(z, exn); (REF.EXN_ADDR a) THROW_REF
  -- Expand: $tag(z, x).TYPE ~~ FUNC (t^n -> eps)
  -- if a = |$exninst(z)|
  -- if exn = {TAG $tagaddr(z)[x], FIELDS val^n}

rule Step_read/throw_ref-null:
  z; (REF.NULL ht) THROW_REF  ~>  TRAP

rule Step_read/throw_ref-vals:
  z; val* (REF.EXN_ADDR a) THROW_REF instr*  ~>  (REF.EXN_ADDR a) THROW_REF
  -- if val* =/= eps \/ instr* =/= eps

rule Step_read/throw_ref-label:
  z; (LABEL_ n `{instr'*} (REF.EXN_ADDR a) THROW_REF)  ~>  (REF.EXN_ADDR a) THROW_REF

rule Step_read/throw_ref-frame:
  z; (FRAME_ n `{f} (REF.EXN_ADDR a) THROW_REF)  ~>  (REF.EXN_ADDR a) THROW_REF

rule Step_read/throw_ref-handler-empty:
  z; (HANDLER_ n `{eps} (REF.EXN_ADDR a) THROW_REF)  ~>  (REF.EXN_ADDR a) THROW_REF

rule Step_read/throw_ref-handler-catch:
  z; (HANDLER_ n `{(CATCH x l) catch'*} (REF.EXN_ADDR a) THROW_REF)  ~>  val* (BR l)
  -- if $exninst(z)[a].TAG = $tagaddr(z)[x]
  -- if val* = $exninst(z)[a].FIELDS  ;; TODO(rossberg, 3): inline

rule Step_read/throw_ref-handler-catch_ref:
  z; (HANDLER_ n `{(CATCH_REF x l) catch'*} (REF.EXN_ADDR a) THROW_REF)  ~>  val* (REF.EXN_ADDR a) (BR l)
  -- if $exninst(z)[a].TAG = $tagaddr(z)[x]
  -- if val* = $exninst(z)[a].FIELDS  ;; TODO(rossberg, 3): inline

rule Step_read/throw_ref-handler-catch_all:
  z; (HANDLER_ n `{(CATCH_ALL l) catch'*} (REF.EXN_ADDR a) THROW_REF)  ~>  (BR l)

rule Step_read/throw_ref-handler-catch_all_ref:
  z; (HANDLER_ n `{(CATCH_ALL_REF l) catch'*} (REF.EXN_ADDR a) THROW_REF)  ~>  (REF.EXN_ADDR a) (BR l)

rule Step_read/throw_ref-handler-next:
  z; (HANDLER_ n `{catch catch'*} (REF.EXN_ADDR a) THROW_REF)  ~>  (HANDLER_ n `{catch'*} (REF.EXN_ADDR a) THROW_REF)
  -- otherwise

rule Step_read/try_table:
  z; val^m (TRY_TABLE bt catch* instr*)  ~>  (HANDLER_ n `{catch*} (LABEL_ n `{eps} val^m instr*))
  -- if $blocktype_(z, bt) = t_1^m -> t_2^n


rule Step_pure/handler-vals:
  (HANDLER_ n `{catch*} val*)  ~>  val*


;; Traps

rule Step_pure/trap-vals:
  val* TRAP instr*  ~>  TRAP
  -- if val* =/= eps \/ instr* =/= eps

rule Step_pure/trap-label:
  (LABEL_ n `{instr'*} TRAP)  ~>  TRAP

rule Step_pure/trap-frame:
  (FRAME_ n `{f} TRAP)  ~>  TRAP


;; Context

rule Step/ctxt-label:
  z; (LABEL_ n `{instr_0*} instr*)  ~>  z'; (LABEL_ n `{instr_0*} instr'*)
  -- Step: z; instr* ~> z'; instr'*

rule Step/ctxt-frame:
  s; f; (FRAME_ n `{f'} instr*)  ~>  s'; f; (FRAME_ n `{f'} instr'*)
  -- Step: s; f'; instr* ~> s'; f'; instr'*


;; Numeric instructions

rule Step_pure/unop-val:
  (CONST nt c_1) (UNOP nt unop)  ~>  (CONST nt c)
  -- if c <- $unop_(nt, unop, c_1)

rule Step_pure/unop-trap:
  (CONST nt c_1) (UNOP nt unop)  ~>  TRAP
  -- if $unop_(nt, unop, c_1) = eps


rule Step_pure/binop-val:
  (CONST nt c_1) (CONST nt c_2) (BINOP nt binop)  ~>  (CONST nt c)
  -- if c <- $binop_(nt, binop, c_1, c_2)

rule Step_pure/binop-trap:
  (CONST nt c_1) (CONST nt c_2) (BINOP nt binop)  ~>  TRAP
  -- if $binop_(nt, binop, c_1, c_2) = eps


rule Step_pure/testop:
  (CONST nt c_1) (TESTOP nt testop)  ~>  (CONST I32 c)
  -- if c = $testop_(nt, testop, c_1)

rule Step_pure/relop:
  (CONST nt c_1) (CONST nt c_2) (RELOP nt relop)  ~>  (CONST I32 c)
  -- if c = $relop_(nt, relop, c_1, c_2)


rule Step_pure/cvtop-val:
  (CONST nt_1 c_1) (CVTOP nt_2 nt_1 cvtop)  ~>  (CONST nt_2 c)
  -- if c <- $cvtop__(nt_1, nt_2, cvtop, c_1)

rule Step_pure/cvtop-trap:
  (CONST nt_1 c_1) (CVTOP nt_2 nt_1 cvtop)  ~>  TRAP
  -- if $cvtop__(nt_1, nt_2, cvtop, c_1) = eps


;; Reference instructions

rule Step_read/ref.null-idx:
  z; (REF.NULL (_IDX x))  ~>  (REF.NULL $type(z, x))

rule Step_read/ref.func:
  z; (REF.FUNC x)  ~>  (REF.FUNC_ADDR $moduleinst(z).FUNCS[x])

rule Step_pure/ref.i31:
  (CONST I32 i) REF.I31  ~>  (REF.I31_NUM $wrap__(32, 31, i))


rule Step_pure/ref.is_null-true:
  ref REF.IS_NULL  ~>  (CONST I32 1)
  -- if ref = (REF.NULL ht)

rule Step_pure/ref.is_null-false:
  ref REF.IS_NULL  ~>  (CONST I32 0)
  -- otherwise


rule Step_pure/ref.as_non_null-null:
  ref REF.AS_NON_NULL  ~>  TRAP
  -- if ref = (REF.NULL ht)

rule Step_pure/ref.as_non_null-addr:
  ref REF.AS_NON_NULL  ~>  ref
  -- otherwise


rule Step_pure/ref.eq-null:
  ref_1 ref_2 REF.EQ  ~>  (CONST I32 1)
  -- if ref_1 = (REF.NULL ht_1) /\ ref_2 = (REF.NULL ht_2)

rule Step_pure/ref.eq-true:
  ref_1 ref_2 REF.EQ  ~>  (CONST I32 1)
  -- otherwise
  -- if ref_1 = ref_2

rule Step_pure/ref.eq-false:
  ref_1 ref_2 REF.EQ  ~>  (CONST I32 0)
  -- otherwise


rule Step_read/ref.test-true:
  s; f; ref (REF.TEST rt)  ~>  (CONST I32 1)
  ;; TODO(3, rossberg): -- Ref_type: s |- ref : $inst_reftype(f.MODULE, rt)
  -- Ref_type: s |- ref : rt'
  -- Reftype_sub: {} |- rt' <: $inst_reftype(f.MODULE, rt)

rule Step_read/ref.test-false:
  s; f; ref (REF.TEST rt)  ~>  (CONST I32 0)
  -- otherwise


rule Step_read/ref.cast-succeed:
  s; f; ref (REF.CAST rt)  ~>  ref
  ;; TODO(3, rossberg): -- Ref_type: s |- ref : $inst_reftype(f.MODULE, rt)
  -- Ref_type: s |- ref : rt'
  -- Reftype_sub: {} |- rt' <: $inst_reftype(f.MODULE, rt)

rule Step_read/ref.cast-fail:
  s; f; ref (REF.CAST rt)  ~>  TRAP
  -- otherwise


;; Scalar reference instructions

rule Step_pure/i31.get-null:
  (REF.NULL ht) (I31.GET sx)  ~>  TRAP

rule Step_pure/i31.get-num:
  (REF.I31_NUM i) (I31.GET sx)  ~>  (CONST I32 $extend__(31, 32, sx, i))


;; Structure instructions

rule Step/struct.new:
  z; val^n (STRUCT.NEW x)  ~>  $add_structinst(z, si); (REF.STRUCT_ADDR a)
  -- Expand: $type(z, x) ~~ STRUCT (mut zt)^n
  -- if a = |$structinst(z)|
  -- if si = {TYPE $type(z, x), FIELDS ($packfield_(zt, val))^n}

rule Step_read/struct.new_default:
  z; (STRUCT.NEW_DEFAULT x)  ~>  val* (STRUCT.NEW x)
  -- Expand: $type(z, x) ~~ STRUCT (mut zt)*
  -- (if $default_($unpack(zt)) = val)*


rule Step_read/struct.get-null:
  z; (REF.NULL ht) (STRUCT.GET sx? x i)  ~>  TRAP

rule Step_read/struct.get-struct:
  z; (REF.STRUCT_ADDR a) (STRUCT.GET sx? x i)  ~>  $unpackfield_(zt*[i], sx?, $structinst(z)[a].FIELDS[i])
  -- Expand: $type(z, x) ~~ STRUCT (mut zt)*


rule Step/struct.set-null:
  z; (REF.NULL ht) val (STRUCT.SET x i)  ~>  z; TRAP

rule Step/struct.set-struct:
  z; (REF.STRUCT_ADDR a) val (STRUCT.SET x i)  ~>  $with_struct(z, a, i, $packfield_(zt*[i], val)); eps
  -- Expand: $type(z, x) ~~ STRUCT (mut zt)*


;; Array instructions

rule Step_pure/array.new:
  val (CONST I32 n) (ARRAY.NEW x)  ~>  val^n (ARRAY.NEW_FIXED x n)

rule Step_read/array.new_default:
  z; (CONST I32 n) (ARRAY.NEW_DEFAULT x)  ~>  val^n (ARRAY.NEW_FIXED x n)
  -- Expand: $type(z, x) ~~ ARRAY (mut zt)
  -- if $default_($unpack(zt)) = val

rule Step/array.new_fixed:
  z; val^n (ARRAY.NEW_FIXED x n)  ~>  $add_arrayinst(z, ai); (REF.ARRAY_ADDR a)
  ----
  -- Expand: $type(z, x) ~~ ARRAY (mut zt)
  -- if a = |$arrayinst(z)|
     /\ ai = {TYPE $type(z, x), FIELDS ($packfield_(zt, val))^n}


rule Step_read/array.new_elem-oob:
  z; (CONST I32 i) (CONST I32 n) (ARRAY.NEW_ELEM x y)  ~>  TRAP
  -- if $(i + n > |$elem(z, y).REFS|)

rule Step_read/array.new_elem-alloc:
  z; (CONST I32 i) (CONST I32 n) (ARRAY.NEW_ELEM x y)  ~>  ref^n (ARRAY.NEW_FIXED x n)
  ----
  -- if ref^n = $elem(z, y).REFS[i : n]


rule Step_read/array.new_data-oob:
  z; (CONST I32 i) (CONST I32 n) (ARRAY.NEW_DATA x y)  ~>  TRAP
  ----
  -- Expand: $type(z, x) ~~ ARRAY (mut zt)
  -- if $(i + n * $zsize(zt)/8 > |$data(z, y).BYTES|)

;; TODO(2, rossberg): outline Cnn = $cunpack(zt)
rule Step_read/array.new_data-num:
  z; (CONST I32 i) (CONST I32 n) (ARRAY.NEW_DATA x y)  ~>  ($const($cunpack(zt), $cunpacknum_(zt, c)))^n (ARRAY.NEW_FIXED x n)
  ----
  -- Expand: $type(z, x) ~~ ARRAY (mut zt)
  -- if $concatn_(byte, $zbytes_(zt, c)^n, $($zsize(zt)/8)) = $data(z, y).BYTES[i : n * $zsize(zt)/8]


rule Step_read/array.get-null:
  z; (REF.NULL ht) (CONST I32 i) (ARRAY.GET sx? x)  ~>  TRAP

rule Step_read/array.get-oob:
  z; (REF.ARRAY_ADDR a) (CONST I32 i) (ARRAY.GET sx? x)  ~>  TRAP
  -- if i >= |$arrayinst(z)[a].FIELDS|

rule Step_read/array.get-array:
  z; (REF.ARRAY_ADDR a) (CONST I32 i) (ARRAY.GET sx? x)  ~>  $unpackfield_(zt, sx?, $arrayinst(z)[a].FIELDS[i])
  ----
  -- Expand: $type(z, x) ~~ ARRAY (mut zt)


rule Step/array.set-null:
  z; (REF.NULL ht) (CONST I32 i) val (ARRAY.SET x)  ~>  z; TRAP

rule Step/array.set-oob:
  z; (REF.ARRAY_ADDR a) (CONST I32 i) val (ARRAY.SET x)  ~>  z; TRAP
  -- if i >= |$arrayinst(z)[a].FIELDS|

rule Step/array.set-array:
  z; (REF.ARRAY_ADDR a) (CONST I32 i) val (ARRAY.SET x)  ~>  $with_array(z, a, i, $packfield_(zt, val)); eps
  ----
  -- Expand: $type(z, x) ~~ ARRAY (mut zt)


rule Step_read/array.len-null:
  z; (REF.NULL ht) ARRAY.LEN  ~>  TRAP

rule Step_read/array.len-array:
  z; (REF.ARRAY_ADDR a) ARRAY.LEN  ~>  (CONST I32 $(|$arrayinst(z)[a].FIELDS|))


rule Step_read/array.fill-null:
  z; (REF.NULL ht) (CONST I32 i) val (CONST I32 n) (ARRAY.FILL x)  ~>  TRAP

rule Step_read/array.fill-oob:
  z; (REF.ARRAY_ADDR a) (CONST I32 i) val (CONST I32 n) (ARRAY.FILL x)  ~>  TRAP
  -- if $(i + n > |$arrayinst(z)[a].FIELDS|)

rule Step_read/array.fill-zero:
  z; (REF.ARRAY_ADDR a) (CONST I32 i) val (CONST I32 n) (ARRAY.FILL x)  ~>  eps
  -- otherwise
  -- if n = 0

rule Step_read/array.fill-succ:
  z; (REF.ARRAY_ADDR a) (CONST I32 i) val (CONST I32 n) (ARRAY.FILL x)  ~>
    (REF.ARRAY_ADDR a) (CONST I32 i) val (ARRAY.SET x)
    (REF.ARRAY_ADDR a) (CONST I32 $(i + 1)) val (CONST I32 $(n-1)) (ARRAY.FILL x)
  -- otherwise

rule Step_read/array.copy-null1:
  z; (REF.NULL ht_1) (CONST I32 i_1) ref (CONST I32 i_2) (CONST I32 n) (ARRAY.COPY x_1 x_2)  ~>  TRAP

rule Step_read/array.copy-null2:
  z; ref (CONST I32 i_1) (REF.NULL ht_2) (CONST I32 i_2) (CONST I32 n) (ARRAY.COPY x_1 x_2)  ~>  TRAP

rule Step_read/array.copy-oob1:
  z; (REF.ARRAY_ADDR a_1) (CONST I32 i_1) (REF.ARRAY_ADDR a_2) (CONST I32 i_2) (CONST I32 n) (ARRAY.COPY x_1 x_2)  ~>  TRAP
  ---- ----
  -- if $(i_1 + n > |$arrayinst(z)[a_1].FIELDS|)

rule Step_read/array.copy-oob2:
  z; (REF.ARRAY_ADDR a_1) (CONST I32 i_1) (REF.ARRAY_ADDR a_2) (CONST I32 i_2) (CONST I32 n) (ARRAY.COPY x_1 x_2)  ~>  TRAP
  ---- ----
  -- if $(i_2 + n > |$arrayinst(z)[a_2].FIELDS|)

rule Step_read/array.copy-zero:
  z; (REF.ARRAY_ADDR a_1) (CONST I32 i_1) (REF.ARRAY_ADDR a_2) (CONST I32 i_2) (CONST I32 n) (ARRAY.COPY x_1 x_2)  ~>  eps
  ---- ----
  -- otherwise
  -- if n = 0

rule Step_read/array.copy-le:
  z; (REF.ARRAY_ADDR a_1) (CONST I32 i_1) (REF.ARRAY_ADDR a_2) (CONST I32 i_2) (CONST I32 n) (ARRAY.COPY x_1 x_2)  ~>
    (REF.ARRAY_ADDR a_1) (CONST I32 i_1)
    (REF.ARRAY_ADDR a_2) (CONST I32 i_2)
    (ARRAY.GET sx? x_2) (ARRAY.SET x_1)
    (REF.ARRAY_ADDR a_1) (CONST I32 $(i_1 + 1)) (REF.ARRAY_ADDR a_2) (CONST I32 $(i_2 + 1)) (CONST I32 $(n-1)) (ARRAY.COPY x_1 x_2)
  ---- ----
  -- otherwise
  -- Expand: $type(z, x_2) ~~ ARRAY (mut zt_2)
  -- if i_1 <= i_2
     /\ sx? = $sx(zt_2)

rule Step_read/array.copy-gt:
  z; (REF.ARRAY_ADDR a_1) (CONST I32 i_1) (REF.ARRAY_ADDR a_2) (CONST I32 i_2) (CONST I32 n) (ARRAY.COPY x_1 x_2)  ~>
    (REF.ARRAY_ADDR a_1) (CONST I32 $(i_1 + n - 1))
    (REF.ARRAY_ADDR a_2) (CONST I32 $(i_2 + n - 1))
    (ARRAY.GET sx? x_2) (ARRAY.SET x_1)
    (REF.ARRAY_ADDR a_1) (CONST I32 i_1) (REF.ARRAY_ADDR a_2) (CONST I32 i_2) (CONST I32 $(n-1)) (ARRAY.COPY x_1 x_2)
  ---- ----
  -- otherwise
  -- Expand: $type(z, x_2) ~~ ARRAY (mut zt_2)
  -- if sx? = $sx(zt_2)


rule Step_read/array.init_elem-null:
  z; (REF.NULL ht) (CONST I32 i) (CONST I32 j) (CONST I32 n) (ARRAY.INIT_ELEM x y)  ~>  TRAP

rule Step_read/array.init_elem-oob1:
  z; (REF.ARRAY_ADDR a) (CONST I32 i) (CONST I32 j) (CONST I32 n) (ARRAY.INIT_ELEM x y)  ~>  TRAP
  ---- ----
  -- if $(i + n > |$arrayinst(z)[a].FIELDS|)

rule Step_read/array.init_elem-oob2:
  z; (REF.ARRAY_ADDR a) (CONST I32 i) (CONST I32 j) (CONST I32 n) (ARRAY.INIT_ELEM x y)  ~>  TRAP
  ---- ----
  -- if $(j + n > |$elem(z, y).REFS|)

rule Step_read/array.init_elem-zero:
  z; (REF.ARRAY_ADDR a) (CONST I32 i) (CONST I32 j) (CONST I32 n) (ARRAY.INIT_ELEM x y)  ~>  eps
  ---- ----
  -- otherwise
  -- if n = 0

rule Step_read/array.init_elem-succ:
  z; (REF.ARRAY_ADDR a) (CONST I32 i) (CONST I32 j) (CONST I32 n) (ARRAY.INIT_ELEM x y)  ~>
    (REF.ARRAY_ADDR a) (CONST I32 i) ref (ARRAY.SET x)
    (REF.ARRAY_ADDR a) (CONST I32 $(i + 1)) (CONST I32 $(j + 1)) (CONST I32 $(n-1)) (ARRAY.INIT_ELEM x y)
  ---- ----
  -- otherwise
  -- if ref = $elem(z, y).REFS[j]


rule Step_read/array.init_data-null:
  z; (REF.NULL ht) (CONST I32 i) (CONST I32 j) (CONST I32 n) (ARRAY.INIT_DATA x y)  ~>  TRAP

rule Step_read/array.init_data-oob1:
  z; (REF.ARRAY_ADDR a) (CONST I32 i) (CONST I32 j) (CONST I32 n) (ARRAY.INIT_DATA x y)  ~>  TRAP
  ---- ----
  -- if $(i + n > |$arrayinst(z)[a].FIELDS|)

rule Step_read/array.init_data-oob2:
  z; (REF.ARRAY_ADDR a) (CONST I32 i) (CONST I32 j) (CONST I32 n) (ARRAY.INIT_DATA x y)  ~>  TRAP
  ---- ----
  -- Expand: $type(z, x) ~~ ARRAY (mut zt)
  -- if $(j + n * $zsize(zt)/8 > |$data(z, y).BYTES|)

rule Step_read/array.init_data-zero:
  z; (REF.ARRAY_ADDR a) (CONST I32 i) (CONST I32 j) (CONST I32 n) (ARRAY.INIT_DATA x y)  ~>  eps
  ---- ----
  -- otherwise
  -- if n = 0

;; TODO(2, rossberg): outline Cnn = $cunpack(zt)
rule Step_read/array.init_data-num:
  z; (REF.ARRAY_ADDR a) (CONST I32 i) (CONST I32 j) (CONST I32 n) (ARRAY.INIT_DATA x y)  ~>
    (REF.ARRAY_ADDR a) (CONST I32 i) ($const($cunpack(zt), $cunpacknum_(zt, c))) (ARRAY.SET x)
    (REF.ARRAY_ADDR a) (CONST I32 $(i + 1)) (CONST I32 $(j + $zsize(zt)/8)) (CONST I32 $(n-1)) (ARRAY.INIT_DATA x y)
  ---- ----
  -- otherwise
  -- Expand: $type(z, x) ~~ ARRAY (mut zt)
  -- if $zbytes_(zt, c) = $data(z, y).BYTES[j : $zsize(zt)/8]


;; External reference instructions

rule Step_pure/extern.convert_any-null:
  (REF.NULL ht) EXTERN.CONVERT_ANY  ~>  (REF.NULL EXTERN)

rule Step_pure/extern.convert_any-addr:
  addrref EXTERN.CONVERT_ANY  ~>  (REF.EXTERN addrref)


rule Step_pure/any.convert_extern-null:
  (REF.NULL ht) ANY.CONVERT_EXTERN  ~>  (REF.NULL ANY)

rule Step_pure/any.convert_extern-addr:
  (REF.EXTERN addrref) ANY.CONVERT_EXTERN  ~>  addrref


;; Vector instructions

rule Step_pure/vvunop:
  (VCONST V128 c_1) (VVUNOP V128 vvunop)  ~>  (VCONST V128 c)
  -- if c <- $vvunop_(V128, vvunop, c_1)


rule Step_pure/vvbinop:
  (VCONST V128 c_1) (VCONST V128 c_2) (VVBINOP V128 vvbinop)  ~>  (VCONST V128 c)
  -- if c <- $vvbinop_(V128, vvbinop, c_1, c_2)


rule Step_pure/vvternop:
  (VCONST V128 c_1) (VCONST V128 c_2) (VCONST V128 c_3) (VVTERNOP V128 vvternop)  ~>  (VCONST V128 c)
  ----
  -- if c <- $vvternop_(V128, vvternop, c_1, c_2, c_3)


rule Step_pure/vvtestop:
  (VCONST V128 c_1) (VVTESTOP V128 ANY_TRUE) ~> (CONST I32 c)
  -- if c = $ine_($vsize(V128), c_1, 0)


rule Step_pure/vunop-val:
  (VCONST V128 c_1) (VUNOP sh vunop)  ~>  (VCONST V128 c)
  -- if c <- $vunop_(sh, vunop, c_1)

rule Step_pure/vunop-trap:
  (VCONST V128 c_1) (VUNOP sh vunop)  ~>  TRAP
  -- if $vunop_(sh, vunop, c_1) = eps


rule Step_pure/vbinop-val:
  (VCONST V128 c_1) (VCONST V128 c_2) (VBINOP sh vbinop)  ~>  (VCONST V128 c)
  -- if c <- $vbinop_(sh, vbinop, c_1, c_2)

rule Step_pure/vbinop-trap:
  (VCONST V128 c_1) (VCONST V128 c_2) (VBINOP sh vbinop)  ~>  TRAP
  -- if $vbinop_(sh, vbinop, c_1, c_2) = eps


;; TODO(2, rossberg): introduce $vitestop for uniformity
rule Step_pure/vtestop-true:
  (VCONST V128 c) (VTESTOP (Jnn X M) ALL_TRUE) ~> (CONST I32 1)
  -- if ci_1* = $lanes_(Jnn X M, c)
  -- (if $(ci_1 =/= 0))*  ;; TODO(3, rossberg): enable same line

rule Step_pure/vtestop-false:
  (VCONST V128 c) (VTESTOP (Jnn X M) ALL_TRUE) ~> (CONST I32 0)
  -- otherwise


rule Step_pure/vrelop:
  (VCONST V128 c_1) (VCONST V128 c_2) (VRELOP sh vrelop)  ~>  (VCONST V128 c)
  -- if $vrelop_(sh, vrelop, c_1, c_2) = c
(; TODO(3, rossberg): this should be implemented at the same level as other pointwise ops
  -- if c'_1* = $lanes_(Lnn X M, c_1)
  -- if c'_2* = $lanes_(Lnn X M, c_2)
  -- if c = $invlanes_($IN($lsize(Lnn)) X M, $extend__(1, $lsize(Lnn), S, $vrelop_(Lnn X M, vrelop, c'_1, c'_2))*)
;)


rule Step_pure/vshiftop:
  (VCONST V128 c_1) (CONST I32 n) (VSHIFTOP (Jnn X M) vshiftop) ~> (VCONST V128 c)
  -- if c'* = $lanes_(Jnn X M, c_1)
  -- if c = $invlanes_(Jnn X M, $vshiftop_(Jnn X M, vshiftop, c', n)*)


rule Step_pure/vbitmask:
  (VCONST V128 c) (VBITMASK (Jnn X M)) ~> (CONST I32 ci)
  -- if ci_1* = $lanes_(Jnn X M, c)
  -- if $ibits_(32, ci) = $ilt_($lsize(Jnn), S, ci_1, 0)*


rule Step_pure/vswizzle:
  (VCONST V128 c_1) (VCONST V128 c_2) (VSWIZZLE (Pnn X M)) ~> (VCONST V128 c)
  -- var c' : iN($lsize(Pnn))
  -- if ci* = $lanes_(Pnn X M, c_2)
  -- if c'* = $lanes_(Pnn X M, c_1) 0^(256 - M)
  -- if c = $invlanes_(Pnn X M, c'*[$(ci*[k])]^(k<M))


rule Step_pure/vshuffle:
  (VCONST V128 c_1) (VCONST V128 c_2) (VSHUFFLE (Pnn X M) i*) ~> (VCONST V128 c)
  -- var c' : iN($lsize(Pnn))
  -- if c'* = $lanes_(Pnn X M, c_1) $lanes_(Pnn X M, c_2)
  -- if c = $invlanes_(Pnn X M, c'*[$(i*[k])]^(k<M))


rule Step_pure/vsplat:
  (CONST $lunpack(Lnn) c_1) (VSPLAT (Lnn X M)) ~> (VCONST V128 c)
  -- if c = $invlanes_(Lnn X M, $lpacknum_(Lnn, c_1)^M)


rule Step_pure/vextract_lane-num:
  (VCONST V128 c_1) (VEXTRACT_LANE (nt X M) i) ~> (CONST nt c_2)
  -- if c_2 = $lanes_(nt X M, c_1)[i]

rule Step_pure/vextract_lane-pack:
  (VCONST V128 c_1) (VEXTRACT_LANE (pt X M) sx i) ~> (CONST I32 c_2)
  -- if c_2 = $extend__($psize(pt), 32, sx, $lanes_(pt X M, c_1)[i])


rule Step_pure/vreplace_lane:
  (VCONST V128 c_1) (CONST $lunpack(Lnn) c_2) (VREPLACE_LANE (Lnn X M) i) ~> (VCONST V128 c)
  -- if c = $invlanes_(Lnn X M, $lanes_(Lnn X M, c_1)[[i] = $lpacknum_(Lnn, c_2)])


rule Step_pure/vextunop:
  (VCONST V128 c_1) (VEXTUNOP sh_2 sh_1 vextunop) ~> (VCONST V128 c)
  -- if $vextunop__(sh_1, sh_2, vextunop, c_1) = c


rule Step_pure/vextbinop:
  (VCONST V128 c_1) (VCONST V128 c_2) (VEXTBINOP sh_2 sh_1 vextbinop) ~> (VCONST V128 c)
  -- if $vextbinop__(sh_1, sh_2, vextbinop, c_1, c_2) = c


rule Step_pure/vnarrow:
  (VCONST V128 c_1) (VCONST V128 c_2) (VNARROW (Jnn_2 X M_2) (Jnn_1 X M_1) sx) ~> (VCONST V128 c)
  -- if ci_1* = $lanes_(Jnn_1 X M_1, c_1)
  -- if ci_2* = $lanes_(Jnn_1 X M_1, c_2)
  -- if cj_1* = $narrow__($lsize(Jnn_1), $lsize(Jnn_2), sx, ci_1)*
  -- if cj_2* = $narrow__($lsize(Jnn_1), $lsize(Jnn_2), sx, ci_2)*
  -- if c = $invlanes_(Jnn_2 X M_2, cj_1* cj_2*)


rule Step_pure/vcvtop-full:
  (VCONST V128 c_1) (VCVTOP (Lnn_2 X M) (Lnn_1 X M) vcvtop) ~> (VCONST V128 c)
  -- if ci* = $lanes_(Lnn_1 X M, c_1)
  -- if cj** = $setproduct_(lane_(Lnn_2), $vcvtop__(Lnn_1 X M, Lnn_2 X M, vcvtop, ci)*)
  -- if c <- $invlanes_(Lnn_2 X M, cj*)*

rule Step_pure/vcvtop-half:
  (VCONST V128 c_1) (VCVTOP (Lnn_2 X M_2) (Lnn_1 X M_1) vcvtop half eps) ~> (VCONST V128 c)
  -- if ci* = $lanes_(Lnn_1 X M_1, c_1)[$half__(Lnn_1 X M_1, Lnn_2 X M_2, half, 0, M_2) : M_2]
  -- if cj** = $setproduct_(lane_(Lnn_2), $vcvtop__(Lnn_1 X M_1, Lnn_2 X M_2, vcvtop, ci)*)
  -- if c <- $invlanes_(Lnn_2 X M_2, cj*)*

rule Step_pure/vcvtop-zero:
  (VCONST V128 c_1) (VCVTOP (nt_2 X M_2) (nt_1 X M_1) vcvtop eps zero) ~> (VCONST V128 c)
  -- if ci* = $lanes_(nt_1 X M_1, c_1)
  -- if cj** = $setproduct_(lane_(nt_2), ($vcvtop__(nt_1 X M_1, nt_2 X M_2, vcvtop, ci)* ++ $zero(nt_2)^M_1))
  -- if c <- $invlanes_(nt_2 X M_2, cj*)*


;; Local instructions

rule Step_read/local.get:
  z; (LOCAL.GET x)  ~>  val
  -- if $local(z, x) = val

rule Step/local.set:
  z; val (LOCAL.SET x)  ~>  $with_local(z, x, val); eps

rule Step_pure/local.tee:
  val (LOCAL.TEE x)  ~>  val val (LOCAL.SET x)


;; Global instructions

rule Step_read/global.get:
  z; (GLOBAL.GET x)  ~>  val
  -- if $global(z, x).VALUE = val

rule Step/global.set:
  z; val (GLOBAL.SET x)  ~>  $with_global(z, x, val); eps


;; Table instructions

rule Step_read/table.get-oob:
  z; (CONST I32 i) (TABLE.GET x)  ~>  TRAP
  -- if i >= |$table(z, x).REFS|

rule Step_read/table.get-val:
  z; (CONST I32 i) (TABLE.GET x)  ~>  $table(z,x).REFS[i]
  -- if i < |$table(z, x).REFS|

rule Step/table.set-oob:
  z; (CONST I32 i) ref (TABLE.SET x)  ~>  z; TRAP
  -- if i >= |$table(z, x).REFS|

rule Step/table.set-val:
  z; (CONST I32 i) ref (TABLE.SET x)  ~>  $with_table(z, x, i, ref); eps
  -- if i < |$table(z, x).REFS|


rule Step_read/table.size:
  z; (TABLE.SIZE x)  ~>  (CONST I32 n)
  -- if |$table(z, x).REFS| = n  ;; TODO(2, rossberg): inline this?


rule Step/table.grow-succeed:
  z; ref (CONST I32 n) (TABLE.GROW x)  ~>  $with_tableinst(z, x, ti); (CONST I32 $(|$table(z, x).REFS|))
  ----
  -- if ti = $growtable($table(z, x), n, ref)

rule Step/table.grow-fail:
  z; ref (CONST I32 n) (TABLE.GROW x)  ~>  z; (CONST I32 $invsigned_(32, $(-1)))


rule Step_read/table.fill-oob:
  z; (CONST I32 i) val (CONST I32 n) (TABLE.FILL x)  ~>  TRAP
  -- if $(i + n) > |$table(z, x).REFS|

rule Step_read/table.fill-zero:
  z; (CONST I32 i) val (CONST I32 n) (TABLE.FILL x)  ~>  eps
  -- otherwise
  -- if n = 0

rule Step_read/table.fill-succ:
  z; (CONST I32 i) val (CONST I32 n) (TABLE.FILL x)  ~>
    (CONST I32 i) val (TABLE.SET x)
    (CONST I32 $(i+1)) val (CONST I32 $(n-1)) (TABLE.FILL x)
  -- otherwise


rule Step_read/table.copy-oob:
  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (TABLE.COPY x y)  ~>  TRAP
  ---- ----
  -- if $(i + n) > |$table(z, y).REFS| \/ $(j + n) > |$table(z, x).REFS|

rule Step_read/table.copy-zero:
  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (TABLE.COPY x y)  ~>  eps
  -- otherwise
  -- if n = 0

rule Step_read/table.copy-le:
  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (TABLE.COPY x y)  ~>
    (CONST I32 j) (CONST I32 i) (TABLE.GET y) (TABLE.SET x)
    (CONST I32 $(j+1)) (CONST I32 $(i+1)) (CONST I32 $(n-1)) (TABLE.COPY x y)
  -- otherwise
  -- if j <= i

rule Step_read/table.copy-gt:
  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (TABLE.COPY x y)  ~>
    (CONST I32 $(j+n-1)) (CONST I32 $(i+n-1)) (TABLE.GET y) (TABLE.SET x)
    (CONST I32 j) (CONST I32 i) (CONST I32 $(n-1)) (TABLE.COPY x y)
  -- otherwise


rule Step_read/table.init-oob:
  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (TABLE.INIT x y)  ~>  TRAP
  ---- ----
  -- if $(i + n) > |$elem(z, y).REFS| \/ $(j + n) > |$table(z, x).REFS|

rule Step_read/table.init-zero:
  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (TABLE.INIT x y)  ~>  eps
  -- otherwise
  -- if n = 0

rule Step_read/table.init-succ:
  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (TABLE.INIT x y)  ~>
    (CONST I32 j) $elem(z,y).REFS[i] (TABLE.SET x)
    (CONST I32 $(j+1)) (CONST I32 $(i+1)) (CONST I32 $(n-1)) (TABLE.INIT x y)
  -- otherwise


rule Step/elem.drop:
  z; (ELEM.DROP x)  ~>  $with_elem(z, x, eps); eps


;; Memory instructions

rule Step_read/load-num-oob:
  z; (CONST I32 i) (LOAD nt x ao)  ~>  TRAP
  ----
  -- if $(i + ao.OFFSET + $size(nt)/8 > |$mem(z, x).BYTES|)

rule Step_read/load-num-val:
  z; (CONST I32 i) (LOAD nt x ao)  ~>  (CONST nt c)
  ----
  -- if $nbytes_(nt, c) = $mem(z, x).BYTES[i + ao.OFFSET : $size(nt)/8]

rule Step_read/load-pack-oob:
  z; (CONST I32 i) (LOAD Inn (n sx) x ao)  ~>  TRAP
  ----
  -- if $(i + ao.OFFSET + n/8 > |$mem(z, x).BYTES|)

rule Step_read/load-pack-val:
  z; (CONST I32 i) (LOAD Inn (n sx) x ao)  ~>  (CONST Inn $extend__(n, $size(Inn), sx, c))
  ----
  -- if $ibytes_(n, c) = $mem(z, x).BYTES[i + ao.OFFSET : n/8]

rule Step_read/vload-oob:
  z; (CONST I32 i) (VLOAD V128 x ao)  ~>  TRAP
  -- if $(i + ao.OFFSET + $vsize(V128)/8 > |$mem(z, x).BYTES|)

rule Step_read/vload-val:
  z; (CONST I32 i) (VLOAD V128 x ao)  ~>  (VCONST V128 c)
  -- if $vbytes_(V128, c) = $mem(z, x).BYTES[i + ao.OFFSET : $vsize(V128)/8]


rule Step_read/vload-pack-oob:
  z; (CONST I32 i) (VLOAD V128 (SHAPE M X K sx) x ao)  ~>  TRAP
  -- if $(i + ao.OFFSET + M * K/8) > |$mem(z, x).BYTES|

rule Step_read/vload-pack-val:
  z; (CONST I32 i) (VLOAD V128 (SHAPE M X K sx) x ao)  ~>  (VCONST V128 c)
  ---- ----
  -- (if $ibytes_(M, j) = $mem(z, x).BYTES[i + ao.OFFSET + k * M/8 : M/8])^(k<K)
  -- if c = $invlanes_(Jnn X K, $extend__(M, $lsizenn(Jnn), sx, j)^K)
     /\ $lsizenn(Jnn) = $(M * 2)


rule Step_read/vload-splat-oob:
  z; (CONST I32 i) (VLOAD V128 (SPLAT N) x ao)  ~>  TRAP
  -- if $(i + ao.OFFSET + N/8) > |$mem(z, x).BYTES|

rule Step_read/vload-splat-val:
  z; (CONST I32 i) (VLOAD V128 (SPLAT N) x ao)  ~>  (VCONST V128 c)
  ----
  -- if $ibytes_(N, j) = $mem(z, x).BYTES[i + ao.OFFSET : N/8]
  -- if N = $lsize(Jnn)  ;; TODO(2, rossberg): relate implicitly
  -- if M = $(128/N)
  -- if c = $invlanes_(Jnn X M, j^M)


rule Step_read/vload-zero-oob:
  z; (CONST I32 i) (VLOAD V128 (ZERO N) x ao)  ~>  TRAP
  -- if $(i + ao.OFFSET + N/8) > |$mem(z, x).BYTES|

rule Step_read/vload-zero-val:
  z; (CONST I32 i) (VLOAD V128 (ZERO N) x ao)  ~>  (VCONST V128 c)
  ----
  -- if $ibytes_(N, j) = $mem(z, x).BYTES[i + ao.OFFSET : N/8]
  -- if c = $extend__(N, 128, U, j)


rule Step_read/vload_lane-oob:
  z; (CONST I32 i) (VCONST V128 c_1) (VLOAD_LANE V128 N x ao j)  ~>  TRAP
  -- if $(i + ao.OFFSET + N/8) > |$mem(z, x).BYTES|

rule Step_read/vload_lane-val:
  z; (CONST I32 i) (VCONST V128 c_1) (VLOAD_LANE V128 N x ao j)  ~>  (VCONST V128 c)
  ----
  -- if $ibytes_(N, k) = $mem(z, x).BYTES[i + ao.OFFSET : N/8]
  -- if N = $lsize(Jnn)  ;; TODO(2, rossberg): relate implicitly
  -- if M = $($vsize(V128)/N)
  -- if c = $invlanes_(Jnn X M, $lanes_(Jnn X M, c_1)[[j] = k])


rule Step/store-num-oob:
  z; (CONST I32 i) (CONST nt c) (STORE nt x ao)  ~>  z; TRAP
  ----
  -- if $(i + ao.OFFSET + $size(nt)/8) > |$mem(z, x).BYTES|

rule Step/store-num-val:
  z; (CONST I32 i) (CONST nt c) (STORE nt x ao)  ~>  $with_mem(z, x, $(i + ao.OFFSET), $($size(nt)/8), b*); eps
  ----
  ;; TODO(3, rossberg): enable otherwise?
  -- if b* = $nbytes_(nt, c)

rule Step/store-pack-oob:
  z; (CONST I32 i) (CONST Inn c) (STORE nt n x ao)  ~>  z; TRAP
  ----
  -- if $(i + ao.OFFSET + n/8) > |$mem(z, x).BYTES|

rule Step/store-pack-val:
  z; (CONST I32 i) (CONST Inn c) (STORE nt n x ao)  ~>  $with_mem(z, x, $(i + ao.OFFSET), $(n/8), b*); eps
  ----
  ;; TODO(3, rossberg): enable otherwise?
  -- if b* = $ibytes_(n, $wrap__($size(Inn), n, c))

rule Step/vstore-oob:
  z; (CONST I32 i) (VCONST V128 c) (VSTORE V128 x ao)  ~>  z; TRAP
  -- if $(i + ao.OFFSET + $vsize(V128)/8) > |$mem(z, x).BYTES|

rule Step/vstore-val:
  z; (CONST I32 i) (VCONST V128 c) (VSTORE V128 x ao)  ~>  $with_mem(z, x, $(i + ao.OFFSET), $($vsize(V128)/8), b*); eps
  -- if b* = $vbytes_(V128, c)


rule Step/vstore_lane-oob:
  z; (CONST I32 i) (VCONST V128 c) (VSTORE_LANE V128 N x ao j)  ~>  z; TRAP
  -- if $(i + ao.OFFSET + N) > |$mem(z, x).BYTES|

rule Step/vstore_lane-val:
  z; (CONST I32 i) (VCONST V128 c) (VSTORE_LANE V128 N x ao j)  ~>  $with_mem(z, x, $(i + ao.OFFSET), $(N/8), b*); eps
  -- if N = $lsize(Jnn)  ;; TODO(2, rossberg): relate implicitly
  -- if M = $(128/N)
  -- if b* = $ibytes_(N, $lanes_(Jnn X M, c)[j])


rule Step_read/memory.size:
  z; (MEMORY.SIZE x)  ~>  (CONST I32 n)
  -- if $(n * $($(64 * $Ki))) = |$mem(z, x).BYTES|


rule Step/memory.grow-succeed:
  z; (CONST I32 n) (MEMORY.GROW x)  ~>  $with_meminst(z, x, mi); (CONST I32 $(|$mem(z, x).BYTES| / $($(64 * $Ki))))
  ----
  -- if mi = $growmem($mem(z, x), n)

rule Step/memory.grow-fail:
  z; (CONST I32 n) (MEMORY.GROW x)  ~>  z; (CONST I32 $invsigned_(32, $(-1)))


rule Step_read/memory.fill-oob:
  z; (CONST I32 i) val (CONST I32 n) (MEMORY.FILL x)  ~>  TRAP
  -- if $(i + n) > |$mem(z, x).BYTES|

rule Step_read/memory.fill-zero:
  z; (CONST I32 i) val (CONST I32 n) (MEMORY.FILL x)  ~>  eps
  -- otherwise
  -- if n = 0

rule Step_read/memory.fill-succ:
  z; (CONST I32 i) val (CONST I32 n) (MEMORY.FILL x)  ~>
    (CONST I32 i) val (STORE I32 8 x $memarg0)
    (CONST I32 $(i+1)) val (CONST I32 $(n-1)) (MEMORY.FILL x)
  -- otherwise


rule Step_read/memory.copy-oob:
  z; (CONST I32 i_1) (CONST I32 i_2) (CONST I32 n) (MEMORY.COPY x_1 x_2)  ~>  TRAP
  ---- ----
  -- if $(i_1 + n) > |$mem(z, x_1).BYTES| \/ $(i_2 + n) > |$mem(z, x_2).BYTES|

rule Step_read/memory.copy-zero:
  z; (CONST I32 i_1) (CONST I32 i_2) (CONST I32 n) (MEMORY.COPY x_1 x_2)  ~>  eps
  -- otherwise
  -- if n = 0

rule Step_read/memory.copy-le:
  z; (CONST I32 i_1) (CONST I32 i_2) (CONST I32 n) (MEMORY.COPY x_1 x_2)  ~>
    (CONST I32 i_1) (CONST I32 i_2) (LOAD I32 (8 U) x_2 $memarg0) (STORE I32 8 x_1 $memarg0)
    (CONST I32 $(i_1 + 1)) (CONST I32 $(i_2 + 1)) (CONST I32 $(n - 1)) (MEMORY.COPY x_1 x_2)
  -- otherwise
  -- if i_1 <= i_2

rule Step_read/memory.copy-gt:
  z; (CONST I32 i_1) (CONST I32 i_2) (CONST I32 n) (MEMORY.COPY x_1 x_2)  ~>
    (CONST I32 $(i_1+n-1)) (CONST I32 $(i_2+n-1)) (LOAD I32 (8 U) x_2 $memarg0) (STORE I32 8 x_1 $memarg0)
    (CONST I32 i_1) (CONST I32 i_2) (CONST I32 $(n-1)) (MEMORY.COPY x_1 x_2)
  -- otherwise


rule Step_read/memory.init-oob:
  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (MEMORY.INIT x y)  ~>  TRAP
  ---- ----
  -- if $(i + n) > |$data(z, y).BYTES| \/ $(j + n) > |$mem(z, x).BYTES|

rule Step_read/memory.init-zero:
  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (MEMORY.INIT x y)  ~>  eps
  -- otherwise
  -- if n = 0

rule Step_read/memory.init-succ:
  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (MEMORY.INIT x y)  ~>
    (CONST I32 j) (CONST I32 $data(z,y).BYTES[i]) (STORE I32 8 x $memarg0)
    (CONST I32 $(j+1)) (CONST I32 $(i+1)) (CONST I32 $(n-1)) (MEMORY.INIT x y)
  -- otherwise


rule Step/data.drop:
  z; (DATA.DROP x)  ~>  $with_data(z, x, eps); eps
